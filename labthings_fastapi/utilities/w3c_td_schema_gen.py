# generated by datamodel-codegen:
#   filename:  w3c_td_schema.json
#   timestamp: 2023-04-14T20:27:29+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, Extra, Field, conint


class Version(BaseModel):
    instance: str


class AnyUri(BaseModel):
    __root__: str


class Description(BaseModel):
    __root__: str


class Descriptions(BaseModel):
    __root__: Optional[Dict[str, str]] = None


class Title(BaseModel):
    __root__: str


class Titles(BaseModel):
    __root__: Optional[Dict[str, str]] = None


class Security(BaseModel):
    __root__: Union[List[str], str]


class Scopes(BaseModel):
    __root__: Union[List[str], str]


class Subprotocol(Enum):
    longpoll = 'longpoll'
    websub = 'websub'
    sse = 'sse'


class ThingContextW3cUri(Enum):
    https___www_w3_org_2019_wot_td_v1 = 'https://www.w3.org/2019/wot/td/v1'


class ThingContext(BaseModel):
    __root__: Union[List[Union[AnyUri, Dict[str, Any]]], ThingContextW3cUri]


class TypeDeclaration(BaseModel):
    __root__: Union[str, List[str]]


class Type(Enum):
    boolean = 'boolean'
    integer = 'integer'
    number = 'number'
    string = 'string'
    object = 'object'
    array = 'array'
    null = 'null'


class DataSchema(BaseModel):
    field_type: Optional[TypeDeclaration] = Field(None, alias='@type')
    description: Optional[Description] = None
    title: Optional[Title] = None
    descriptions: Optional[Descriptions] = None
    titles: Optional[Titles] = None
    writeOnly: Optional[bool] = None
    readOnly: Optional[bool] = None
    oneOf: Optional[List[DataSchema]] = None
    unit: Optional[str] = None
    enum: Optional[List] = Field(None, min_items=1, unique_items=True)
    format: Optional[str] = None
    const: Optional[Any] = None
    type: Optional[Type] = None
    items: Optional[Union[DataSchema, List[DataSchema]]] = None
    maxItems: Optional[conint(ge=0)] = None
    minItems: Optional[conint(ge=0)] = None
    minimum: Optional[float] = None
    maximum: Optional[float] = None
    properties: Optional[Any] = None
    required: Optional[List[str]] = None


class OpEnum(Enum):
    readproperty = 'readproperty'
    writeproperty = 'writeproperty'
    observeproperty = 'observeproperty'
    unobserveproperty = 'unobserveproperty'


class Response(BaseModel):
    contentType: Optional[str] = None


class FormElementProperty(BaseModel):
    class Config:
        extra = Extra.allow

    op: Optional[Union[OpEnum, List[OpEnum]]] = None
    href: AnyUri
    contentType: Optional[str] = None
    contentCoding: Optional[str] = None
    subprotocol: Optional[Subprotocol] = None
    security: Optional[Security] = None
    scopes: Optional[Scopes] = None
    response: Optional[Response] = None


class OpEnum2(Enum):
    invokeaction = 'invokeaction'


class FormElementAction(BaseModel):
    class Config:
        extra = Extra.allow

    op: Optional[Union[OpEnum2, List[OpEnum2]]] = None
    href: AnyUri
    contentType: Optional[str] = None
    contentCoding: Optional[str] = None
    subprotocol: Optional[Subprotocol] = None
    security: Optional[Security] = None
    scopes: Optional[Scopes] = None
    response: Optional[Response] = None


class OpEnum4(Enum):
    subscribeevent = 'subscribeevent'
    unsubscribeevent = 'unsubscribeevent'


class FormElementEvent(BaseModel):
    class Config:
        extra = Extra.allow

    op: Optional[Union[OpEnum4, List[OpEnum4]]] = None
    href: AnyUri
    contentType: Optional[str] = None
    contentCoding: Optional[str] = None
    subprotocol: Optional[Subprotocol] = None
    security: Optional[Security] = None
    scopes: Optional[Scopes] = None
    response: Optional[Response] = None


class OpEnum6(Enum):
    readallproperties = 'readallproperties'
    writeallproperties = 'writeallproperties'
    readmultipleproperties = 'readmultipleproperties'
    writemultipleproperties = 'writemultipleproperties'


class FormElementRoot(BaseModel):
    class Config:
        extra = Extra.allow

    op: Optional[Union[OpEnum6, List[OpEnum6]]] = None
    href: AnyUri
    contentType: Optional[str] = None
    contentCoding: Optional[str] = None
    subprotocol: Optional[Subprotocol] = None
    security: Optional[Security] = None
    scopes: Optional[Scopes] = None
    response: Optional[Response] = None


class PropertyElement(BaseModel):
    class Config:
        extra = Extra.allow

    field_type: Optional[TypeDeclaration] = Field(None, alias='@type')
    description: Optional[Description] = None
    descriptions: Optional[Descriptions] = None
    title: Optional[Title] = None
    titles: Optional[Titles] = None
    forms: List[FormElementProperty] = Field(..., min_items=1)
    uriVariables: Optional[Dict[str, DataSchema]] = None
    observable: Optional[bool] = None
    writeOnly: Optional[bool] = None
    readOnly: Optional[bool] = None
    oneOf: Optional[List[DataSchema]] = None
    unit: Optional[str] = None
    enum: Optional[List] = Field(None, min_items=1, unique_items=True)
    format: Optional[str] = None
    const: Optional[Any] = None
    type: Optional[Type] = None
    items: Optional[Union[DataSchema, List[DataSchema]]] = None
    maxItems: Optional[conint(ge=0)] = None
    minItems: Optional[conint(ge=0)] = None
    minimum: Optional[float] = None
    maximum: Optional[float] = None
    properties: Optional[Any] = None
    required: Optional[List[str]] = None


class ActionElement(BaseModel):
    class Config:
        extra = Extra.allow

    field_type: Optional[TypeDeclaration] = Field(None, alias='@type')
    description: Optional[Description] = None
    descriptions: Optional[Descriptions] = None
    title: Optional[Title] = None
    titles: Optional[Titles] = None
    forms: List[FormElementAction] = Field(..., min_items=1)
    uriVariables: Optional[Dict[str, DataSchema]] = None
    input: Optional[DataSchema] = None
    output: Optional[DataSchema] = None
    safe: Optional[bool] = None
    idempotent: Optional[bool] = None


class EventElement(BaseModel):
    class Config:
        extra = Extra.allow

    field_type: Optional[TypeDeclaration] = Field(None, alias='@type')
    description: Optional[Description] = None
    descriptions: Optional[Descriptions] = None
    title: Optional[Title] = None
    titles: Optional[Titles] = None
    forms: List[FormElementEvent] = Field(..., min_items=1)
    uriVariables: Optional[Dict[str, DataSchema]] = None
    subscription: Optional[DataSchema] = None
    data: Optional[DataSchema] = None
    cancellation: Optional[DataSchema] = None


class LinkElement(BaseModel):
    class Config:
        extra = Extra.allow

    href: AnyUri
    type: Optional[str] = None
    rel: Optional[str] = None
    anchor: Optional[AnyUri] = None


class Scheme(Enum):
    nosec = 'nosec'


class SecuritySchemeItem(BaseModel):
    field_type: Optional[TypeDeclaration] = Field(None, alias='@type')
    description: Optional[Description] = None
    descriptions: Optional[Descriptions] = None
    proxy: Optional[AnyUri] = None
    scheme: Scheme


class Scheme1(Enum):
    basic = 'basic'


class In(Enum):
    header = 'header'
    query = 'query'
    body = 'body'
    cookie = 'cookie'


class SecuritySchemeItem1(BaseModel):
    field_type: Optional[TypeDeclaration] = Field(None, alias='@type')
    description: Optional[Description] = None
    descriptions: Optional[Descriptions] = None
    proxy: Optional[AnyUri] = None
    scheme: Scheme1
    in_: Optional[In] = Field(None, alias='in')
    name: Optional[str] = None


class Scheme2(Enum):
    digest = 'digest'


class Qop(Enum):
    auth = 'auth'
    auth_int = 'auth-int'


class SecuritySchemeItem2(BaseModel):
    field_type: Optional[TypeDeclaration] = Field(None, alias='@type')
    description: Optional[Description] = None
    descriptions: Optional[Descriptions] = None
    proxy: Optional[AnyUri] = None
    scheme: Scheme2
    qop: Optional[Qop] = None
    in_: Optional[In] = Field(None, alias='in')
    name: Optional[str] = None


class Scheme3(Enum):
    apikey = 'apikey'


class SecuritySchemeItem3(BaseModel):
    field_type: Optional[TypeDeclaration] = Field(None, alias='@type')
    description: Optional[Description] = None
    descriptions: Optional[Descriptions] = None
    proxy: Optional[AnyUri] = None
    scheme: Scheme3
    in_: Optional[In] = Field(None, alias='in')
    name: Optional[str] = None


class Scheme4(Enum):
    bearer = 'bearer'


class SecuritySchemeItem4(BaseModel):
    field_type: Optional[TypeDeclaration] = Field(None, alias='@type')
    description: Optional[Description] = None
    descriptions: Optional[Descriptions] = None
    proxy: Optional[AnyUri] = None
    scheme: Scheme4
    authorization: Optional[AnyUri] = None
    alg: Optional[str] = None
    format: Optional[str] = None
    in_: Optional[In] = Field(None, alias='in')
    name: Optional[str] = None


class Scheme5(Enum):
    psk = 'psk'


class SecuritySchemeItem5(BaseModel):
    field_type: Optional[TypeDeclaration] = Field(None, alias='@type')
    description: Optional[Description] = None
    descriptions: Optional[Descriptions] = None
    proxy: Optional[AnyUri] = None
    scheme: Scheme5
    identity: Optional[str] = None


class Scheme6(Enum):
    oauth2 = 'oauth2'


class Flow(Enum):
    code = 'code'


class SecuritySchemeItem6(BaseModel):
    field_type: Optional[TypeDeclaration] = Field(None, alias='@type')
    description: Optional[Description] = None
    descriptions: Optional[Descriptions] = None
    proxy: Optional[AnyUri] = None
    scheme: Scheme6
    authorization: Optional[AnyUri] = None
    token: Optional[AnyUri] = None
    refresh: Optional[AnyUri] = None
    scopes: Optional[Union[List[str], str]] = None
    flow: Optional[Flow] = None


class SecurityScheme(BaseModel):
    __root__: Union[
        SecuritySchemeItem,
        SecuritySchemeItem1,
        SecuritySchemeItem2,
        SecuritySchemeItem3,
        SecuritySchemeItem4,
        SecuritySchemeItem5,
        SecuritySchemeItem6,
    ]


class WotTdSchema16October2019(BaseModel):
    class Config:
        extra = Extra.allow

    id: Optional[AnyUrl] = None
    title: Title
    titles: Optional[Titles] = None
    properties: Optional[Dict[str, PropertyElement]] = None
    actions: Optional[Dict[str, ActionElement]] = None
    events: Optional[Dict[str, EventElement]] = None
    description: Optional[Description] = None
    descriptions: Optional[Descriptions] = None
    version: Optional[Version] = None
    links: Optional[List[LinkElement]] = None
    forms: Optional[List[FormElementRoot]] = Field(None, min_items=1)
    base: Optional[AnyUri] = None
    securityDefinitions: Dict[str, SecurityScheme]
    support: Optional[AnyUri] = None
    created: Optional[datetime] = None
    modified: Optional[datetime] = None
    security: Union[str, List[str]]
    field_type: Optional[TypeDeclaration] = Field(None, alias='@type')
    field_context: ThingContext = Field(..., alias='@context')


DataSchema.update_forward_refs()

# This file was generated by `datamodel-code-generator`, using
# the command
# datamodel-codegen  --input person.json --input-file-type jsonschema --output model.py
# I then manually simplified it a bit, mostly by deduplicating/using inheritance.

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, Extra, Field, conint, validator


class Version(BaseModel):
    instance: str


class AnyUri(BaseModel):
    __root__: str


class Description(BaseModel):
    __root__: str


class Descriptions(BaseModel):
    __root__: Optional[Dict[str, str]] = None


class Title(BaseModel):
    __root__: str


class Titles(BaseModel):
    __root__: Optional[Dict[str, str]] = None


class Security(BaseModel):
    __root__: Union[List[str], str]


class Scopes(BaseModel):
    __root__: Union[List[str], str]


class Subprotocol(Enum):
    longpoll = 'longpoll'
    websub = 'websub'
    sse = 'sse'


class ThingContextW3cUri(Enum):
    https___www_w3_org_2019_wot_td_v1 = 'https://www.w3.org/2019/wot/td/v1'

THING_CONTEXT = ThingContextW3cUri.https___www_w3_org_2019_wot_td_v1


class ThingContext(BaseModel):
    __root__: Union[List[Union[AnyUri, Dict[str, Any]]], ThingContextW3cUri]


class TypeDeclaration(BaseModel):
    __root__: Union[str, List[str]]


class Type(Enum):
    boolean = 'boolean'
    integer = 'integer'
    number = 'number'
    string = 'string'
    object = 'object'
    array = 'array'
    null = 'null'


class DataSchema(BaseModel):
    field_type: Optional[TypeDeclaration] = Field(None, alias='@type')
    description: Optional[Description] = None
    title: Optional[Title] = None
    descriptions: Optional[Descriptions] = None
    titles: Optional[Titles] = None
    writeOnly: Optional[bool] = None
    readOnly: Optional[bool] = None
    oneOf: Optional[List[DataSchema]] = None
    unit: Optional[str] = None
    enum: Optional[List] = Field(None, min_items=1, unique_items=True)
    format: Optional[str] = None
    const: Optional[Any] = None
    type: Optional[Type] = None
    items: Optional[Union[DataSchema, List[DataSchema]]] = None
    maxItems: Optional[conint(ge=0)] = None
    minItems: Optional[conint(ge=0)] = None
    minimum: Optional[float] = None
    maximum: Optional[float] = None
    properties: Optional[Any] = None
    required: Optional[List[str]] = None


class Op(Enum):
    readproperty = 'readproperty'             # Only allowed for Property forms (was OpEnum)
    writeproperty = 'writeproperty'
    observeproperty = 'observeproperty'
    unobserveproperty = 'unobserveproperty'
    invokeaction = 'invokeaction'             # Only for action forms (was OpEnum2)
    subscribeevent = 'subscribeevent'         # Only for event forms (was OpEnum3)
    unsubscribeevent = 'unsubscribeevent'
    readallproperties = 'readallproperties'   # Only for root forms (was OpEnum6)
    writeallproperties = 'writeallproperties'
    readmultipleproperties = 'readmultipleproperties'
    writemultipleproperties = 'writemultipleproperties'


PROPERTY_OPS = (
    Op.readproperty,
    Op.writeproperty,
    Op.observeproperty,
    Op.unobserveproperty,
)


ACTION_OPS = (
    Op.invokeaction
)


EVENT_OPS = (
    Op.subscribeevent,
    Op.unsubscribeevent,
)


ROOT_OPS = (
    Op.readallproperties,
    Op.writeallproperties,
    Op.readmultipleproperties,
    Op.writemultipleproperties,
)


class Response(BaseModel):
    contentType: Optional[str] = None


class Form(BaseModel):
    class Config:
        extra = Extra.allow

    op: Optional[Union[Op, List[Op]]] = None
    href: AnyUri
    contentType: Optional[str] = None
    contentCoding: Optional[str] = None
    subprotocol: Optional[Subprotocol] = None
    security: Optional[Security] = None
    scopes: Optional[Scopes] = None
    response: Optional[Response] = None


class InteractionAffordance(BaseModel):
    class Config:
        extra = Extra.allow

    description: Optional[Description] = None
    descriptions: Optional[Descriptions] = None
    title: Optional[Title] = None
    titles: Optional[Titles] = None
    forms: List[Form] = Field(..., min_items=1)
    uriVariables: Optional[Dict[str, DataSchema]] = None


def check_form_op(form: Form, allowed_ops: iter[Op]):
    """Raise a ValueError if a form contains ops not in a list"""
    if form.op is None:
        return
    ops = [form.op] if isinstance(form.op, Op) else form.op
    for op in ops:
        if form.op not in allowed_ops:
            raise ValueError(f"{form.op} is not in {allowed_ops}.")


class PropertyAffordance(InteractionAffordance, DataSchema):
    observable: Optional[bool] = None

    @validator("forms", each_item=True, check_fields=False)
    def check_ops(cls, v):
        check_form_op(v, PROPERTY_OPS)


class ActionAffordance(InteractionAffordance):
    field_type: Optional[TypeDeclaration] = Field(None, alias='@type')
    input: Optional[DataSchema] = None
    output: Optional[DataSchema] = None
    safe: Optional[bool] = None
    idempotent: Optional[bool] = None

    @validator("forms", each_item=True, check_fields=False)
    def check_ops(cls, v):
        check_form_op(v, ACTION_OPS)


class EventAffordance(BaseModel):
    field_type: Optional[TypeDeclaration] = Field(None, alias='@type')
    subscription: Optional[DataSchema] = None
    data: Optional[DataSchema] = None
    cancellation: Optional[DataSchema] = None
    
    @validator("forms", each_item=True, check_fields=False)
    def check_ops(cls, v):
        check_form_op(v, EVENT_OPS)


class LinkElement(BaseModel):
    class Config:
        extra = Extra.allow

    href: AnyUri
    type: Optional[str] = None
    rel: Optional[str] = None
    anchor: Optional[AnyUri] = None


class SecuritySchemeEnum(Enum):
    nosec = 'nosec'    # was Scheme
    basic = 'basic'    # was Scheme1
    digest = 'digest'  # was Scheme2
    apikey = 'apikey'  # was Scheme3
    bearer = 'bearer'  # was Scheme4
    psk = 'psk'        # was Scheme5
    oauth2 = 'oauth2'  # was Scheme6


class In(Enum):
    header = 'header'
    query = 'query'
    body = 'body'
    cookie = 'cookie'


class Qop(Enum):
    auth = 'auth'
    auth_int = 'auth-int'


class Flow(Enum):
    code = 'code'


class SecurityScheme(BaseModel):
    field_type: Optional[TypeDeclaration] = Field(None, alias='@type')
    description: Optional[Description] = None
    descriptions: Optional[Descriptions] = None
    proxy: Optional[AnyUri] = None
    scheme: SecuritySchemeEnum


class NoSecurityScheme(SecurityScheme):
    scheme: SecuritySchemeEnum = SecuritySchemeEnum.nosec
    description: Optional[Description] = "No security"


class NameAndIn(BaseModel):
    in_: Optional[In] = Field(None, alias='in')  # for scheme=basic,digest,apikey,bearer
    name: Optional[str] = None                   # for scheme=basic,digest,apikey,bearer

class BasicSecurityScheme(SecurityScheme, NameAndIn):
    scheme: SecuritySchemeEnum = SecuritySchemeEnum.basic

class DigestSecurityScheme(SecurityScheme, NameAndIn):
    scheme: SecuritySchemeEnum = SecuritySchemeEnum.digest
    qop: Optional[Qop] = None                    # for scheme=digest

class APISecurityScheme(SecurityScheme, NameAndIn):
    scheme: SecuritySchemeEnum = SecuritySchemeEnum.apikey

class BearerSecurityScheme(SecurityScheme, NameAndIn):
    scheme: SecuritySchemeEnum = SecuritySchemeEnum.bearer
    authorization: Optional[AnyUri] = None       # for scheme=bearer,oauth2
    alg: Optional[str] = None                    # for scheme=bearer
    format: Optional[str] = None                 # for scheme=bearer

class PskSecurityScheme(SecurityScheme):
    scheme: SecuritySchemeEnum = SecuritySchemeEnum.psk
    identity: Optional[str] = None               # for scheme=psk

class Oauth2SecurityScheme(SecurityScheme):
    scheme: SecuritySchemeEnum = SecuritySchemeEnum.oauth2
    authorization: Optional[AnyUri] = None       # for scheme=bearer,oauth2
    token: Optional[AnyUri] = None               # for schema=oauth2
    refresh: Optional[AnyUri] = None             # for scheme=oauth2
    scopes: Optional[Union[List[str], str]] = None  # oauth2
    flow: Optional[Flow] = None                  # for scheme=oauth2


class WotTdSchema16October2019(BaseModel):
    class Config:
        extra = Extra.allow

    id: Optional[AnyUrl] = None
    title: Title
    titles: Optional[Titles] = None
    properties: Optional[Dict[str, PropertyAffordance]] = None
    actions: Optional[Dict[str, ActionAffordance]] = None
    events: Optional[Dict[str, EventAffordance]] = None
    description: Optional[Description] = None
    descriptions: Optional[Descriptions] = None
    version: Optional[Version] = None
    links: Optional[List[LinkElement]] = None
    forms: Optional[List[Form]] = Field(None, min_items=1)
    base: Optional[AnyUri] = None
    securityDefinitions: Dict[str, SecurityScheme]
    support: Optional[AnyUri] = None
    created: Optional[datetime] = None
    modified: Optional[datetime] = None
    security: Union[str, List[str]]
    field_type: Optional[TypeDeclaration] = Field(None, alias='@type')
    field_context: ThingContext = Field(THING_CONTEXT, alias='@context')
    
    @validator("forms", each_item=True, check_fields=False)
    def check_ops(cls, v):
        check_form_op(v, ROOT_OPS)

ThingDescription = WotTdSchema16October2019

DataSchema.update_forward_refs()
